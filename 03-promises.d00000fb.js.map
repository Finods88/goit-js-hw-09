{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SA0BA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAlCAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAEN,MAAMC,EAAeC,KAAKL,cAAc,yBACxCI,EAAaE,UAAW,EAExB,MAAMC,EAAaC,SAASH,KAAKI,SAASlB,MAAMmB,MAAO,IACjDC,EAAYH,SAASH,KAAKI,SAASG,KAAKF,MAAO,KA6BvDG,eAAgCC,EAAQP,EAAYI,GAClD,MAAMI,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAChC,MAEMC,EAAU5B,EAAc2B,EAFTT,GAAcS,EAAI,GAAKL,GAGzCO,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjB4B,EAAAhC,GAASiC,OAAOC,QAAQ,qBAAqB/B,QAAeC,MAAU,IAEvE+B,OAAM,EAAChC,SAAEA,EAAQC,MAAEA,MAClB4B,EAAAhC,GAASiC,OAAOG,QAAQ,oBAAoBjC,QAAeC,MAAU,IAGzEwB,EAASS,KAAKP,E,OAGVtB,QAAQ8B,IAAIV,E,EA3ClBW,CAFelB,SAASH,KAAKI,SAASK,OAAOJ,MAAO,IAE3BH,EAAYI,GAClCO,MAAK,KACJb,KAAKsB,OAAO,IAEbL,OAAMM,IACLC,QAAQD,MAAM,mCAAoCA,EAAM,IAEzDE,SAAQ,KACP1B,EAAaE,UAAW,CAAK,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const submitButton = this.querySelector('button[type=\"submit\"]');\n  submitButton.disabled = true;\n\n  const firstDelay = parseInt(this.elements.delay.value, 10);\n  const delayStep = parseInt(this.elements.step.value, 10);\n  const amount = parseInt(this.elements.amount.value, 10);\n\n  generatePromises(amount, firstDelay, delayStep)\n    .then(() => {\n      this.reset();\n    })\n    .catch(error => {\n      console.error('Error during promise generation:', error);\n    })\n    .finally(() => {\n      submitButton.disabled = false;\n    });\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nasync function generatePromises(amount, firstDelay, delayStep) {\n  const promises = [];\n\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = firstDelay + (i - 1) * delayStep;\n\n    const promise = createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","submitButton","this","disabled","firstDelay","parseInt","elements","value","delayStep","step","async","amount","promises","i","promise","then","$parcel$interopDefault","Notify","success","catch","failure","push","all","$47d4ff9957288465$var$generatePromises","reset","error","console","finally"],"version":3,"file":"03-promises.d00000fb.js.map"}